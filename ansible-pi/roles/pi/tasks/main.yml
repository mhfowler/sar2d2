---
- name: 'Configure WIFI'
  copy: src=secret_files/wpa_supplicant.conf dest=/etc/wpa_supplicant/wpa_supplicant.conf mode=0600

#- name: 'Update APT package cache'
#  action: apt update_cache=yes

#- name: 'Upgrade APT to the latest packages'
#  action: apt upgrade=safe

- name: 'Ensure log directory'
  action: file dest={{log_dir}} state=directory mode=777

- name: 'Ensure data directory'
  action: file dest={{data_dir}} state=directory mode=770

- name: 'ensure .ssh directory'
  action: file dest=/root/.ssh/ state=directory mode=770

- name: 'copy over ssh keys for deploy purposes'
  action: copy src={{item.from}} dest={{item.to}} mode={{item.mode}}
  with_items:
      - { from: 'secret_files/deploy_rsa.pub', to: '/root/.ssh/id_rsa.pub', mode: '0644' }
      - { from: 'secret_files/deploy_rsa', to: '/root/.ssh/id_rsa', mode: '0600' }

- name: 'Deploy code from git'
  git: repo={{repo_url}} dest={{src_dir}} remote={{repo_remote}} version={{repo_branch}} accept_hostkey=yes force=yes
  tags: code

- name: copy files from reddeadnettle to /srv/www on remote host
  synchronize:
    src: {{src_dir}}/reddeadnettle
    dest: /srv/www
  delegate_to: "{{ inventory_hostname }}"

- name: 'Ensure secret_files directory'
  action: file dest={{src_dir}}/ansible-pi/secret_files state=directory

- name: 'Build python dependencies'
  apt:
    pkg:
    - build-essential
    - libssl-dev
    - libffi-dev
    - python-dev

- name: 'install python requirements'
  action: pip requirements={{src_dir}}/requirements.txt state=present executable=/usr/bin/pip3

- name: 'Copy secret.json file'
  copy: src=secret_files/secret.json dest={{src_dir}}/ansible-pi/secret_files/secret.json
  tags: code

- name: 'Copy rc.local'
  action: template src=templates/rc.local dest=/etc/rc.local
  tags: debug

- name: 'Copy etc/network/intefaces'
  action: template src=templates/interfaces dest=/etc/network/interfaces

- name: 'Copy cmdline.txt'
  action: template src=templates/cmdline.txt dest=/boot/cmdline.txt

- name: 'Copy motd'
  action: template src=templates/motd dest=/etc/motd

- name: 'install node'
  apt:
    pkg:
    - node
    - npm
  tags: debug

# https://www.npmjs.com/package/ngrok
- name: Install packages based on package.json.
  npm: path={{src_dir}}


# install ytalk
- name: 'install ytalk'
  apt:
    pkg:
    - ytalk

  # copy over /etc/profile
- name: 'Copy profile'
  action: template src=templates/profile dest=/etc/profile
  tags: code

# copy over /home/pi/.bash_profile
- name: 'Copy .bash_profile'
  action: template src=templates/.bash_profile dest={{bash_profile}}
  tags: code

- name: 'Ensure cron directory'
  action: file dest={{cron_dir}} state=directory mode=770

- name: Copy over cron jobs
  template:
    src: '{{ item.src }}'
    dest: '{{ cron_dir }}/{{ item.path }}'
  with_filetree: 'templates/cron'
  when: item.state == 'file'
  tags: code

- name: for dynamic dns cronjob
  cron:
    name: "dynamic dns"
    minute: "*/2"
    hour: "*"
    job: "{{cron_dir}}/dynamicdns.sh"
  tags: code

- name: 'make /srv owned by admin'
  file: path=/srv state=directory owner=root group=admin recurse=yes
  tags: code

- name: 'make bash scripts executable'
  file: path={{src_dir}}/bash state=directory mode=0770 owner=root group=admin recurse=yes
  tags: code

- name: 'make cron jobs executable'
  file: path={{cron_dir}} state=directory mode=0770 owner=root group=admin recurse=yes
  tags: code


#- name: 'Reboot'
#  command: /sbin/reboot

